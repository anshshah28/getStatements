from datetime import datetime
import numpy as np
import pandas as pd
import requests
from lxml import html

symbol = input("What is the ticker symbol?")
summary_url = 'https://finance.yahoo.com/quote/' + symbol + '?p=' + symbol
balance_Sheet_url = 'https://finance.yahoo.com/quote/' + symbol + '/balance-sheet?p=' + symbol
IS_url = 'https://finance.yahoo.com/quote/' + symbol + '/financials?p=' + symbol
SCF_url = 'https://finance.yahoo.com/quote/' + symbol + '/cash-flow?p=' + symbol

# Set up the request headers we're using to simulate a request by Chrome. Simulating a request is good practice
headers = {
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,'
              'application/signed-exchange;v=b3',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-US,en;q=0.9',
    'Cache-Control': 'max-age=0',
    'Pragma': 'no-cache',
    'Referrer': 'https://google.com',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/77.0.3865.120 Safari/537.36 '
}

# Fetch the page we're going to parse using requests
summary_page = requests.get(summary_url, headers)
balance_sheet_page = requests.get(balance_Sheet_url, headers)
IS_page = requests.get(IS_url, headers)
SCF_page = requests.get(SCF_url, headers)

# Parse the page with LXML so we can start doing stuff
summary_tree = html.fromstring(summary_page.content)
balance_sheet_tree = html.fromstring(balance_sheet_page.content)
IS_tree = html.fromstring(IS_page.content)
SCF_tree = html.fromstring(SCF_page.content)

# Print Stock Name, Price, and Change
print("The Stock Name is: " + ', '.join(summary_tree.xpath("//h1/text()")))
print("It's Dollar and Percent Change are: " + ', '.join(
    summary_tree.xpath('//*[@id="quote-header-info"]/div[3]/div/div/span[1]/text()')))

# Ask for Stock Card
while True:
    try:
        question = input("Do you want the stock card? Please input Yes or No: ")
        if question == 'Yes':
            df_list = pd.read_html(summary_page.content)
            firstTable = df_list[0]
            secondTable = df_list[-1]
            # Reset index values of the second DataFrame to make sure it appends properly
            secondTable = secondTable.reset_index(drop=True)
            # Concatenate the DataFrames side by side
            hStack = pd.concat([firstTable, secondTable], axis=1)
            pd.set_option('display.max_columns', 4)
            pd.set_option('display.max_colwidth', 20)
            print(hStack)
        else:
            print("Sure, No Problem.")
    except ValueError:
        print("Sorry, I didn't understand that. Please try again.")
        continue
    else:
        break


#######################################################################################################################
def getFinancials(tree):
    table_rows = tree.xpath("//div[contains(@class, 'D(tbr)')]")
    assert len(table_rows) > 0

    parsed_rows = []

    for table_row in table_rows:
        parsed_row = []
        el = table_row.xpath("./div")

        none_count = 0

        for rs in el:
            try:
                (text,) = rs.xpath('.//span/text()[1]')
                parsed_row.append(text)
            except ValueError:
                parsed_row.append(np.NAN)
                none_count += 1
        if none_count < 4:
            parsed_rows.append(parsed_row)
    df = pd.DataFrame(parsed_rows)
    df = df.set_index(0)

    # Rename the 'Breakdown' column to 'Date'
    cols = list(df.columns)
    cols[0] = 'Date'
    df.set_axis(cols, axis='columns', inplace=False)

    # Display all Columns
    pd.set_option('display.max_columns', 34)

    # Return DataFrame
    return df


#######################################################################################################################

while True:
    try:
        question = input("Do you want to get the financials?: ")
        if question == 'Yes':
            balanceSheet = getFinancials(balance_sheet_tree)
            incomeStatement = getFinancials(IS_tree)
            statementOfCashFlows = getFinancials(SCF_tree)

            exportQuestion = input("Do you want these financials on Excel?: ")
            if exportQuestion == 'Yes':
                date = datetime.today().strftime('%Y-%m-%d')
                writer = pd.ExcelWriter(symbol + '-' + date + '-scraped.xlsx')
                incomeStatement.to_excel(writer, sheet_name='Income Statement')
                balanceSheet.to_excel(writer, sheet_name='Balance Sheet')
                statementOfCashFlows.to_excel(writer, sheet_name='Statement of Cash Flows')
                writer.save()
            else:
                print('\n')
                print('This is the Balance Sheet')
                print('\n')
                print(balanceSheet)
                print('\n')

                print("This is the Income Statement")
                print('\n')
                print(incomeStatement)
                print('\n')

                print("This is the Statement of Cash Flows")
                print('\n')
                print(statementOfCashFlows)

        else:
            print("Sure. No Problem. ")
    except ValueError:
        print("Sorry, I didn't understand that. Please try again.")
        continue
    else:
        break

